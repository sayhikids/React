
server.port=80
# 우리가 사용할 Viewer 이름이 타임리프(Thymeleaf) 입니다. 이넘의 cache 값을 false로
spring.thymeleaf.cache=false

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/bootdb
spring.datasource.username=ahyun
spring.datasource.password=990810

# ORM Application : JPA 를 DB Entity(테이블) 로 바인딩하는 중간계의 프로그램입니다.
# 스프링부트에서는 기본적으로 Hibernate 를 사용하는데, 업체에 따라서 
# MyBatis, IBatis 등을 사용합니다. 모두 같은 ORM Mapper 하고 생각하시면 됩니다.

# 실행되는 DB 쿼리를 콘솔에 출력하도록 설정합니다.
spring.jpa.show-sql=true

# 프로젝트 실행시에 자동으로 DDL 생성 여부를 결정하는 속성 설정합니다.
# create은 매번 생성, update 는 변경이 필요시 alter 로 처리, 테이블이 없는 경우엔 create 되어집니다.
spring.jpa.hibernate.ddl-auto=update

# 실제 jpa 구현체인 하이버네이트가 동작하면서 발생하는 SQL 을 콘솔에 출력하도록 설정
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show-sql=true

# 바인딩되는 파라미터 값 출력하는 속성 
logging.level.org.hibernate.type.descriptor.sql=trace
spring.jpa.open-in-view=true

# 웹요청의 모든 내용을 debug 모드로 콘솔에 출력
logging.level.web=debug

logging.level.org.hibernate.SQL = debug
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

#Post 요청시 요청 파라미터 보이기 속성설정
spring.mvc.log-request-details=true

spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# 스프링에서는 파일 업로드를 처리하는 방법이 많지만, 우린 기본 내장된 tomcat 의 servlet API
# 를 이용해서 업로드 처리를 할 예정입니다.
# 아래는 업로드 처리시 서버에서 수행해야 할 기본 설정 작업내용임.

# 아래 반드시 해야함.. multipart 패키지의 모든 API 를 사용가능하도록 설정
spring.servlet.multipart.enabled= true
# 업로드시 저장될 폴더 지정
spring.servlet.multipart.location= D:\\upload
# 요청시 한번에 처리할 최대 파일 사이즈 지정
spring.servlet.multipart.max-request-size= 1024MB
# 파일 하나의 최대 크기 설정
spring.servlet.multipart.max-file-size= 100MB

com.fullstack2.board.path = D:\\upload
